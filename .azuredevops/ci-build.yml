parameters:
- name: verbosity
  displayName: 'verbosity of this run'
  type: string
  default: Minimal
  values:
  - Detailed
  - Quiet
  - Diagnostic
  - Minimal
- name: versionSuffixType
  displayName: Nuget Version Suffix Type
  type: string
  default: rc.
  values:
  - rc.
  - beta.
  - alpha.
  - none

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/ConsoleApplicationBuilder
      - .azuredevops/ci-build.yml

pool:
  vmImage: ubuntu-latest

variables:
  dotNetVersion: '8.x'
  buildConfiguration: 'Release'
  nugetServiceConnection: 'Nuget - PRI.ConsoleApplicationBuilder' # 'TestNuGet - PRI-ConsoleApplicationBuilder'
  testProjects: 'src/ConsoleApplicationBuilder/Tests/Pri.ConsoleApplicationBuilder.Tests.csproj'
  symbolPackageFormat: 'snupkg'
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: $[counter(format('{0}-{1}',variables['majorVersion'],variables['minorVersion']), 1)]
  buildVersion: $[counter(format('{0}-{1}-{2}-{3}',variables['majorVersion'],variables['minorVersion'],variables['patchVersion'],variables['versionSuffixType']), 1)]
  ${{ if not( eq(parameters['versionSuffixType'], 'none') ) }}:
    versionSuffix: '${{ parameters.versionSuffixType }}$(buildVersion)'
  ${{ else }}:
    versionSuffix: ''
  assemblyVersion: '$(majorVersion).$(minorVersion).$(patchVersion).$(buildVersion)'
  ${{ if eq(parameters.verbosity, 'Quiet') }}:
    dotnetVerbosity: q # Quiet
  ${{ elseif eq(parameters.verbosity, 'Detailed') }}:
    dotnetVerbosity: d # Detailed
  ${{ elseif eq(parameters.verbosity, 'Diagnostic') }}:
    dotnetVerbosity: diag # Diagnostic
  ${{ else }}:
    dotnetVerbosity: m # Minimal

stages:
- stage: build_test
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test'
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotNetVersion)'
        inputs:
          packageType: sdk
          version: $(dotNetVersion)

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: 'src/ConsoleApplicationBuilder/**/*.csproj'
          verbosityRestore: '${{ parameters.verbosity }}'

      - task: DotNetCoreCLI@2
        # run tests and publish results/coverage to Azure DevOps
        displayName: 'Dotnet Build/Test - $(buildConfiguration)'
        inputs:
          command: 'test'
          projects: $(testProjects)
          arguments: >-
              --no-restore
              -c $(buildConfiguration)
              --nologo
              -v $(dotnetVerbosity)
              /clp:ErrorsOnly
              --collect "Code coverage"
          testRunTitle: 'Dotnet Test - $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Pack'
        inputs:
          command: 'pack'
          verbosityPack: '${{ parameters.verbosity }}'
          packagesToPack: 'src/ConsoleApplicationBuilder/ConsoleApplicationBuilder/Pri.ConsoleApplicationBuilder.csproj'
          nobuild: true
          includeSymbols: true
          includesource: true

      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'NuGet'
          targetPath: '$(Build.ArtifactStagingDirectory)'
          publishLocation: 'pipeline'

- stage: nuget_publish
  displayName: 'NuGet Publish'
  dependsOn: build_test
  jobs:
  - job: nuget_push
    displayName: 'NuGet Push'
    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: 'NuGet'
          targetPath: '$(Build.ArtifactStagingDirectory)'

      - task: NuGetCommand@2
        displayName: 'NuGet Push'
        inputs:
          command: push
          nuGetFeedType: external
          publishFeedCredentials: $(nugetServiceConnection)

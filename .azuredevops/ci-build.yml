parameters:
- name: verbosity
  displayName: 'verbosity of this run'
  type: string
  default: Minimal
  values:
  - Detailed
  - Quiet
  - Diagnostic
  - Minimal
- name: versionSuffixType
  displayName: Nuget Version Suffix Type
  type: string
  default: rc.
  values:
  - rc.
  - beta.
  - alpha.
  - none

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/ConsoleApplicationBuilder
      - .azuredevops

pool:
  vmImage: ubuntu-latest

variables:
  dotNetVersion: '8.x'
  buildConfiguration: 'Release'
  nugetServiceConnection: 'TestNuGet - PRI-ConsoleApplicationBuilder'
  testProjects: 'src/ConsoleApplicationBuilder/Tests/Pri.ConsoleApplicationBuilder.Tests.csproj'
  symbolPackageFormat: 'snupkg'
  majorVersion: '0'
  minorVersion: '1'
  shortVersion: '$(majorVersion).$(minorVersion)'
  patchVersion: $[counter(variables['shortVersion'], 1)]
  versionPrefix: '$(majorVersion).$(minorVersion).$(patchVersion)'
  buildVersionKey: '$(majorVersion).$(minorVersion).$(patchVersion)$(versionSuffixType)'
  buildVersion: $[counter(variables['buildVersionKey'], 1)]
  ${{ if not( eq(parameters['versionSuffixType'], 'none') ) }}:
    versionSuffix: '${{ parameters.versionSuffixType }}$(buildVersion)'
  ${{ else }}:
    versionSuffix: ''
  assemblyVersion: '$(majorVersion).$(minorVersion).$(patchVersion).$(buildVersion)'
  ${{ if eq(parameters.verbosity, 'Quiet') }}:
    dotnetVerbosity: q # Quiet
  ${{ elseif eq(parameters.verbosity, 'Detailed') }}:
    dotnetVerbosity: d # Detailed
  ${{ elseif eq(parameters.verbosity, 'Diagnostic') }}:
    dotnetVerbosity: diag # Diagnostic
  ${{ else }}:
    dotnetVerbosity: m # Minimal

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET SDK $(dotNetVersion)'
    inputs:
      packageType: sdk
      version: $(dotNetVersion)

  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: 'src/ConsoleApplicationBuilder/**/*.csproj'
      verbosityRestore: '${{ parameters.verbosity }}'

  - task: DotNetCoreCLI@2
    # run tests and publish results/coverage to Azure DevOps
    displayName: 'Dotnet Build/Test - $(buildConfiguration)'
    inputs:
      command: 'test'
      projects: $(testProjects)
      arguments: >-
          --no-restore
          -c $(buildConfiguration)
          --nologo
          -v $(dotnetVerbosity)
          /clp:ErrorsOnly
          --collect "Code coverage"
      testRunTitle: 'Dotnet Test - $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Pack'
    inputs:
      command: 'pack'
      verbosityPack: '${{ parameters.verbosity }}'
      packagesToPack: 'src/ConsoleApplicationBuilder/ConsoleApplicationBuilder/Pri.ConsoleApplicationBuilder.csproj'
      nobuild: true
      includeSymbols: true
      includesource: true

  # - task: CopyFiles@2
  # - task: CopyFiles@2
  #   displayName: 'Copy package to artifact staging directory'
  #   inputs:
  #     SourceFolder: 'src/ConsoleApplicationBuilder'
  #     Contents: '**/*.nupkg'
  #     TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      publishLocation: 'pipeline'

  - task: NuGetCommand@2
    displayName: 'NuGet Push'
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: $(nugetServiceConnection)